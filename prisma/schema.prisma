// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  username String @unique
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tests        Test[]
  participants Participant[]
}

model Test {
  id        String @id @default(uuid())
  creatorId String

  title              String
  joinCode           String    @unique
  description        String?   @db.Text
  testDuration       Int?
  startTime          DateTime?
  endTime            DateTime?
  acceptResponses    Boolean
  showDetailedScore  Boolean
  showCorrectAnswers Boolean
  isOrdered          Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  questions    Question[]
  participants Participant[]

  @@index([creatorId])
}

enum QuestionType {
  ESSAY
  CHOICE
  MULTIPLE_CHOICE
}

model Question {
  id     String @id @default(uuid())
  testId String

  questionText String       @db.Text
  type         QuestionType
  order        Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  test           Test                    @relation(fields: [testId], references: [id], onDelete: Cascade)
  essay          EssayQuestion?
  choice         ChoiceQuestion?
  multipleChoice MultipleChoiceQuestion?

  @@index([testId, order])
}

// ESSAY QUESTION
model EssayQuestion {
  id            String  @id @default(uuid())
  answerText    String  @db.Text
  isExactAnswer Boolean
  maxScore      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question Question      @relation(fields: [id], references: [id], onDelete: Cascade)
  answers  EssayAnswer[]
}

model EssayAnswer {
  id            String @id @default(uuid())
  participantId String
  questionId    String

  answerText String @db.Text
  score      Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participant Participant   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  question    EssayQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// CHOICE QUESTION
model ChoiceQuestion {
  id String @id @default(uuid())

  isChoiceRandomized Boolean
  maxScore           Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question Question       @relation(fields: [id], references: [id], onDelete: Cascade)
  choices  Choice[]
  answers  ChoiceAnswer[]
}

model Choice {
  id         String  @id @default(uuid())
  questionId String
  choiceText String  @db.Text
  isCorrect  Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question ChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  ChoiceAnswer[]

  @@index([questionId])
}

model ChoiceAnswer {
  id               String  @id @default(uuid())
  questionId       String
  participantId    String
  selectedChoiceId String?

  score Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question    ChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  participant Participant    @relation(fields: [participantId], references: [id], onDelete: Cascade)
  choice      Choice?        @relation(fields: [selectedChoiceId], references: [id], onDelete: Cascade)

  @@index([participantId])
  @@index([questionId])
  @@index([selectedChoiceId])
}

// MULTIPLE CHOICE QUESTION
model MultipleChoiceQuestion {
  id String @id @default(uuid())

  isChoiceRandomized Boolean
  maxScore           Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question        Question               @relation(fields: [id], references: [id], onDelete: Cascade)
  multipleChoices MultipleChoice[]
  answers         MultipleChoiceAnswer[]
}

model MultipleChoice {
  id         String @id @default(uuid())
  questionId String

  choiceText String  @db.Text
  isCorrect  Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question MultipleChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  MultipleChoiceAnswer[] @relation("MultipleChoiceAnswerSelectedChoices")

  @@index([questionId])
}

model MultipleChoiceAnswer {
  id            String @id @default(uuid())
  questionId    String
  participantId String

  score Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participant     Participant            @relation(fields: [participantId], references: [id], onDelete: Cascade)
  question        MultipleChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedChoices MultipleChoice[]       @relation("MultipleChoiceAnswerSelectedChoices")

  @@index([participantId])
  @@index([questionId])
}

model Participant {
  id     String  @id @default(uuid())
  testId String
  userId String?

  username String
  score    Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  test                  Test                   @relation(fields: [testId], references: [id], onDelete: Cascade)
  user                  User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  essayAnswers          EssayAnswer[]
  choiceAnswers         ChoiceAnswer[]
  multipleChoiceAnswers MultipleChoiceAnswer[]

  @@index([testId])
  @@index([userId])
  @@index([username])
}
