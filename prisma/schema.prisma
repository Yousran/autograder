// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants Participant[]
  tests      Test[]
}

model Participant {
  id        Int      @id @default(autoincrement())
  testId    Int
  userId    Int?
  username  String?
  totalScore Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([testId])
  @@index([userId])

  // Relations
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  essayAnswers EssayAnswer[]
  choiceAnswers ChoiceAnswer[]
}

model Test {
  id        Int      @id @default(autoincrement())
  creatorId Int
  testTitle String
  joinCode  String   @unique
  testDuration Int
  acceptResponses Boolean
  showDetailedScores Boolean
  isOrdered Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId]) // Menambahkan index untuk pencarian berdasarkan creatorId

  questions Question[]
  participants Participant[]
  user     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Question {
  id        Int      @id @default(autoincrement())
  testId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  essay     EssayQuestion?
  choice    ChoiceQuestion?

  @@index([testId]) // Sudah ada, ini sudah cukup
}

model EssayQuestion {
  id        Int      @id @default(autoincrement())
  questionText String @db.Text
  answerText String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question   Question  @relation(fields: [id], references: [id], onDelete: Cascade)
  answers   EssayAnswer[]
}

model ChoiceQuestion {
  id        Int      @id @default(autoincrement())
  questionText String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  choices   Choice[]
  question   Question  @relation(fields: [id], references: [id], onDelete: Cascade)
  answers   ChoiceAnswer[]
}

model Choice {
  id        Int      @id @default(autoincrement())
  questionId Int
  choiceText String @db.Text
  isCorrect Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId]) // Untuk mempercepat pencarian berdasarkan questionId

  question ChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  ChoiceAnswer[]
}

model EssayAnswer {
  id        Int      @id @default(autoincrement())
  questionId Int
  participantId Int
  answerText String @db.Text
  score     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([participantId]) // Untuk mempercepat pencarian berdasarkan participantId
  @@index([questionId]) // Untuk mempercepat pencarian berdasarkan questionId

  question   EssayQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

model ChoiceAnswer {
  id        Int      @id @default(autoincrement())
  questionId Int
  participantId Int
  selectedChoiceId Int?
  score     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([participantId]) // Untuk mempercepat pencarian berdasarkan participantId
  @@index([questionId]) // Untuk mempercepat pencarian berdasarkan questionId

  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  question   ChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  choice     Choice? @relation(fields: [selectedChoiceId], references: [id], onDelete: Cascade)
}